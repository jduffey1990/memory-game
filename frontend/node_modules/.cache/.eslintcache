[{"C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\index.js":"1","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\App.js":"3","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\MultiPlayerGame.js":"4","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\cardTable\\decks.js":"5","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\Timer\\timer.js":"6","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\cardTable\\cards.js":"7","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\cardTable\\card.js":"8","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\api.js":"9","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\topScore.js":"10"},{"size":535,"mtime":1697829759279,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1697829759332,"results":"13","hashOfConfig":"12"},{"size":7601,"mtime":1698444296098,"results":"14","hashOfConfig":"12"},{"size":386,"mtime":1698186935483,"results":"15","hashOfConfig":"12"},{"size":1984,"mtime":1698249537383,"results":"16","hashOfConfig":"12"},{"size":837,"mtime":1698440379066,"results":"17","hashOfConfig":"12"},{"size":2560,"mtime":1698186128654,"results":"18","hashOfConfig":"12"},{"size":369,"mtime":1697841111787,"results":"19","hashOfConfig":"12"},{"size":2214,"mtime":1698443927550,"results":"20","hashOfConfig":"12"},{"size":401,"mtime":1698445777058,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"bxct6m",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"25"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"25"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\index.js",[],[],["56"],"C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\App.js",["57","58"],[],"C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\MultiPlayerGame.js",["59","60","61"],[],"import React, { useState } from 'react';\r\nimport Cards from './cardTable/cards';\r\nimport { DECKS } from './cardTable/decks';\r\n\r\nfunction MultiPlayerGame({ player1Score, player2Score }) {\r\n    return (\r\n      <div className=\"multiplayer-game\">\r\n        <div>Player 1 Score: {player1Score} Player 2 Score: {player2Score}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default MultiPlayerGame;","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\cardTable\\decks.js",["62","63"],[],"import React, {useState} from 'react';\r\n\r\n//black and white images\r\nimport baseball from \"../../images/baseball.png\";\r\nimport football from \"../../images/football.png\";\r\nimport bike from \"../../images/bike.png\";\r\nimport cat from \"../../images/cat.png\";\r\nimport chicken from \"../../images/chicken.png\";\r\nimport dog from \"../../images/dog.png\";\r\nimport mountains from \"../../images/mountains.png\";\r\nimport skis from \"../../images/skis.png\";\r\nimport ballerina from \"../../images/ballerina.png\"\r\n\r\n//superhero images\r\nimport batman from \"../../images/batman.png\";\r\nimport captMarvel from \"../../images/captMarvel.png\";\r\nimport catWoman from \"../../images/catWoman.png\";\r\nimport hulk from \"../../images/hulk.png\";\r\nimport panther from \"../../images/panther.png\";\r\nimport spiderman from \"../../images/spiderman.png\";\r\nimport superman from \"../../images/superman.png\";\r\nimport wonder from \"../../images/wonder.png\";\r\nimport storm from \"../../images/storm.png\";\r\n\r\n//disney princesses\r\nimport ariel from \"../../images/ariel.png\";\r\nimport belle from \"../../images/belle.png\";\r\nimport cinderella from \"../../images/cinderella.png\";\r\nimport elsa from \"../../images/elsa.png\";\r\nimport merida from \"../../images/merida.png\";\r\nimport mulan from \"../../images/mulan.png\";\r\nimport moana from \"../../images/moana.png\";\r\nimport snowWhite from \"../../images/snowWhite.png\";\r\nimport tiana from \"../../images/tiana.png\";\r\n\r\nexport const DECKS = {\r\n  \"Black and White\": [baseball, baseball, football, football, bike, bike, cat, cat, chicken, chicken, dog, dog, mountains, mountains, skis, skis, ballerina, ballerina],\r\n  \"Superheroes\": [batman, batman, captMarvel, captMarvel, catWoman, catWoman, hulk, hulk, panther, panther, spiderman, spiderman, superman, superman, wonder, wonder, storm, storm],\r\n  \"Disney Princesses\": [ariel, ariel, belle, belle, cinderella, cinderella, elsa, elsa, merida, merida, mulan, mulan, moana, moana, snowWhite, snowWhite, tiana, tiana]\r\n  // ... any other decks you add\r\n};","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\Timer\\timer.js",["64"],[],"C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\cardTable\\cards.js",["65","66","67"],[],"import React, {useState, useEffect} from 'react';\r\nimport Card from './card';\r\n\r\nfunction shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\n\r\nfunction Cards({ deck, matchedPairs, setMatchedPairs, onCardMatch }) {\r\n\r\n    const [shuffledCards, setShuffledCards] = useState(() => shuffleArray([...deck]));\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [matchedCards, setMatchedCards] = useState([]);\r\n\r\n    const handleCardFlip = (index) => {\r\n        // Check if the card is already flipped, matched, or if there are already two guessed cards\r\n        if (flippedCards.includes(index) || matchedCards.includes(index) || flippedCards.length === 2) return;\r\n    \r\n        const newFlipped = [...flippedCards, index];\r\n        \r\n        // If a card is already flipped and it's the same as the current card, do nothing\r\n        if (flippedCards.length === 1 && newFlipped[0] === newFlipped[1]) return;\r\n        \r\n        setFlippedCards(newFlipped);\r\n    \r\n        // If 2 cards have been flipped\r\n        if (newFlipped.length === 2) {\r\n            const [firstIndex, secondIndex] = newFlipped;\r\n            \r\n            // Check if the images of the flipped cards match\r\n            if (shuffledCards[firstIndex] === shuffledCards[secondIndex]) {\r\n                // Add the indices to the matchedCards array\r\n                setMatchedPairs(prevMatched => [...prevMatched, firstIndex, secondIndex]);\r\n                onCardMatch(true)\r\n                \r\n                // Clear the flipped cards array\r\n                setFlippedCards([]);\r\n            } else {\r\n                setTimeout(() => {\r\n                    // Reset the flipped cards\r\n                    setFlippedCards([]);\r\n                    onCardMatch(false)\r\n                }, 2000);  // Reduced to 1 second for better user experience\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"cards-container\">\r\n            {shuffledCards.map((img, index) => (\r\n                <Card \r\n                    key={index}\r\n                    front={img} \r\n                    // A card is flipped if it's in flippedCards or matchedCards arrays\r\n                    isFlipped={flippedCards.includes(index) || matchedPairs.includes(index)}\r\n                    onFlip={() => handleCardFlip(index)}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\cardTable\\card.js",[],[],"C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\api.js",[],[],"C:\\Users\\Jordan Duffey\\Desktop\\memory-game\\frontend\\src\\Components\\topScore.js",[],[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":161,"column":15,"nodeType":"72","messageId":"73","endLine":164,"endColumn":13},{"ruleId":"70","severity":1,"message":"71","line":172,"column":15,"nodeType":"72","messageId":"73","endLine":175,"endColumn":13},{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"78","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":13},{"ruleId":"74","severity":1,"message":"79","line":3,"column":10,"nodeType":"76","messageId":"77","endLine":3,"endColumn":15},{"ruleId":"74","severity":1,"message":"80","line":1,"column":8,"nodeType":"76","messageId":"77","endLine":1,"endColumn":13},{"ruleId":"74","severity":1,"message":"75","line":1,"column":16,"nodeType":"76","messageId":"77","endLine":1,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":24,"column":8,"nodeType":"83","endLine":24,"endColumn":30,"suggestions":"84"},{"ruleId":"74","severity":1,"message":"85","line":1,"column":26,"nodeType":"76","messageId":"77","endLine":1,"endColumn":35},{"ruleId":"74","severity":1,"message":"86","line":15,"column":27,"nodeType":"76","messageId":"77","endLine":15,"endColumn":43},{"ruleId":"74","severity":1,"message":"87","line":17,"column":26,"nodeType":"76","messageId":"77","endLine":17,"endColumn":41},"no-new-object",["88"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Cards' is defined but never used.","'DECKS' is defined but never used.","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'seconds'. Either include it or remove the dependency array.","ArrayExpression",["89"],"'useEffect' is defined but never used.","'setShuffledCards' is assigned a value but never used.","'setMatchedCards' is assigned a value but never used.","no-object-constructor",{"desc":"90","fix":"91"},"Update the dependencies array to be: [matchedPairs, onStop, seconds]",{"range":"92","text":"93"},[731,753],"[matchedPairs, onStop, seconds]"]