{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jordan Duffey\\\\Desktop\\\\memory-game\\\\frontend\\\\src\\\\Components\\\\cardTable\\\\cards.js\";\nimport React, { useState } from 'react';\nimport Card from './card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction Cards({\n  deck,\n  matchedPairs,\n  setMatchedPairs,\n  onCardMatch\n}) {\n  const [shuffledCards, setShuffledCards] = useState(() => shuffleArray([...deck]));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const handleCardFlip = index => {\n    // Check if the card is already flipped, matched, or if there are already two guessed cards\n    if (flippedCards.includes(index) || matchedCards.includes(index) || flippedCards.length === 2) return;\n    const newFlipped = [...flippedCards, index];\n\n    // If a card is already flipped and it's the same as the current card, do nothing\n    if (flippedCards.length === 1 && newFlipped[0] === newFlipped[1]) return;\n    setFlippedCards(newFlipped);\n\n    // If 2 cards have been flipped\n    if (newFlipped.length === 2) {\n      const [firstIndex, secondIndex] = newFlipped;\n\n      // Check if the images of the flipped cards match\n      if (shuffledCards[firstIndex] === shuffledCards[secondIndex]) {\n        // Add the indices to the matchedCards array\n        setMatchedPairs(prevMatched => [...prevMatched, firstIndex, secondIndex]);\n        onCardMatch(true);\n\n        // Clear the flipped cards array\n        setFlippedCards([]);\n      } else {\n        setTimeout(() => {\n          // Reset the flipped cards\n          setFlippedCards([]);\n          onCardMatch(false);\n        }, 2000); // Reduced to 1 second for better user experience\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cards-container\",\n    children: shuffledCards.map((img, index) => /*#__PURE__*/_jsxDEV(Card, {\n      front: img\n      // A card is flipped if it's in flippedCards or matchedCards arrays\n      ,\n      isFlipped: flippedCards.includes(index) || matchedPairs.includes(index),\n      onFlip: () => handleCardFlip(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\nexport default Cards;","map":{"version":3,"names":["React","useState","Card","jsxDEV","_jsxDEV","shuffleArray","array","i","length","j","Math","floor","random","Cards","deck","matchedPairs","setMatchedPairs","onCardMatch","shuffledCards","setShuffledCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","handleCardFlip","index","includes","newFlipped","firstIndex","secondIndex","prevMatched","setTimeout","className","children","map","img","front","isFlipped","onFlip","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Jordan Duffey/Desktop/memory-game/frontend/src/Components/cardTable/cards.js"],"sourcesContent":["import React, {useState } from 'react';\r\nimport Card from './card';\r\n\r\nfunction shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\n\r\nfunction Cards({ deck, matchedPairs, setMatchedPairs, onCardMatch }) {\r\n\r\n    const [shuffledCards, setShuffledCards] = useState(() => shuffleArray([...deck]));\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [matchedCards, setMatchedCards] = useState([]);\r\n\r\n    const handleCardFlip = (index) => {\r\n        // Check if the card is already flipped, matched, or if there are already two guessed cards\r\n        if (flippedCards.includes(index) || matchedCards.includes(index) || flippedCards.length === 2) return;\r\n    \r\n        const newFlipped = [...flippedCards, index];\r\n        \r\n        // If a card is already flipped and it's the same as the current card, do nothing\r\n        if (flippedCards.length === 1 && newFlipped[0] === newFlipped[1]) return;\r\n        \r\n        setFlippedCards(newFlipped);\r\n    \r\n        // If 2 cards have been flipped\r\n        if (newFlipped.length === 2) {\r\n            const [firstIndex, secondIndex] = newFlipped;\r\n            \r\n            // Check if the images of the flipped cards match\r\n            if (shuffledCards[firstIndex] === shuffledCards[secondIndex]) {\r\n                // Add the indices to the matchedCards array\r\n                setMatchedPairs(prevMatched => [...prevMatched, firstIndex, secondIndex]);\r\n                onCardMatch(true)\r\n                \r\n                // Clear the flipped cards array\r\n                setFlippedCards([]);\r\n            } else {\r\n                setTimeout(() => {\r\n                    // Reset the flipped cards\r\n                    setFlippedCards([]);\r\n                    onCardMatch(false)\r\n                }, 2000);  // Reduced to 1 second for better user experience\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"cards-container\">\r\n            {shuffledCards.map((img, index) => (\r\n                <Card \r\n                    key={index}\r\n                    front={img} \r\n                    // A card is flipped if it's in flippedCards or matchedCards arrays\r\n                    isFlipped={flippedCards.includes(index) || matchedPairs.includes(index)}\r\n                    onFlip={() => handleCardFlip(index)}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}